#!/usr/bin/python3
# -*- coding: utf-8 -*-
import socket, curses, time, sys, random
from curses import wrapper
from threading import *
from display import Display

# Systempfad zum den Sensor, weitere Systempfade könnten über ein Array
# oder weiteren Variablen hier hinzugefügt werden.
# 28-02161f5a48ee müsst ihr durch die eures Sensors ersetzen!
sensor_1 = '/sys/bus/w1/devices/28-00000c207a53/w1_slave'
sensor_2 = '/sys/bus/w1/devices/28-00000c213e60/w1_slave'
#28-00000c207a53
#28-00000c213e60

# -*- coding: utf-8 -*-
# -*- coding: utf-8 -*-
def readTempSensor(sensorName) :
    """Aus dem Systembus lese ich die Temperatur der DS18B20 aus."""
    f = open(sensorName, 'r')
    lines = f.readlines()
    f.close()
    return lines

def readTempLines(sensorName) :
    lines = readTempSensor(sensorName)
    # Solange nicht die Daten gelesen werden konnten, bin ich hier in einer Endlosschleife
    while len(lines) == 0 or lines[0].strip()[-3:] != 'YES':
        time.sleep(0.2)
        lines = readTempSensor(sensorName)
    temperaturStr = lines[1].find('t=')
    # Ich überprüfe ob die Temperatur gefunden wurde.
    if temperaturStr != -1 :
        tempData = lines[1][temperaturStr+2:]
        tempCelsius = round(float(tempData) / 1000.0, 1)
        # Rückgabe als string
        return float(tempCelsius)

def broadcast(msg):
    port = 22222
    interface = "eth0"
    
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_BINDTODEVICE, str(interface + '\0').encode('utf-8'))
    #print("sending data:" + msg)
    #sys.stdout.write("\rsending data: ")
    sys.stdout.write("\r\033[1;36;40m" + msg)
    sys.stdout.flush()
    s.sendto(msg.encode('utf-8'), ('<broadcast>', port))

def run(stdscr):
    display = Display(stdscr);
    while True:
        s1_value = readTempLines(sensor_1)
        s2_value = readTempLines(sensor_2)
        # s1_value = str(random.uniform(20.5, 85.5))
        # s2_value = str(random.uniform(20.5, 85.5))
        broadcast(s1_value + "|" + s2_value)
        display.setSensorValues(s1_value, s2_value)
        time.sleep(10)

def main(stdscr):
    curses.curs_set(False)
    
    T = Thread(target=run, args=(stdscr,));
    T.setDaemon(True)
    T.start()

    c = stdscr.getch()
    while c != ord('q'):
        c = stdscr.getch()

wrapper(main)